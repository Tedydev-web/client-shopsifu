'use client';

import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { User, Phone, MapPin } from 'lucide-react';
import { Spinner } from '@/components/ui/spinner';
import { useCustomerInfo } from '@/components/client/checkout/hooks/useCustomer-Info';

// T·ªânh/th√†nh, qu·∫≠n/huy·ªán, ph∆∞·ªùng/x√£ ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi useCustomerInfo hook

interface CustomerInfoProps {
  formData: {
    fullName: string;
    phoneNumber: string;
    email: string;
    address: string;
    note: string;
    saveInfo: boolean;
    receiverName?: string;
    receiverPhone?: string;
    province?: string;
    district?: string;
    ward?: string;
  };
  handleChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  handleCheckboxChange: (checked: boolean) => void;
  isLoggedIn?: boolean; // Th√™m prop ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
}

export function CustomerInfo({ formData, handleChange, handleCheckboxChange, isLoggedIn = true }: CustomerInfoProps) {
  // Debug log ƒë·ªÉ ki·ªÉm tra formData
  console.log('üéØ CustomerInfo formData:', {
    province: formData.province,
    district: formData.district,  
    ward: formData.ward
  });

  // S·ª≠ d·ª•ng hook useCustomerInfo ƒë·ªÉ qu·∫£n l√Ω to√†n b·ªô logic
  const {
    // States
    sameAsCustomer,
    customerProvince,
    customerDistrict,
    customerWard,
    customerProvinceName,
    customerDistrictName,
    customerWardName,
    shippingProvince,
    shippingDistrict,
    shippingWard,
    shippingProvinceName,
    shippingDistrictName,
    shippingWardName,
    
    // Data from hooks
    provinces,
    customerDistricts,
    customerWards,
    shippingDistricts,
    shippingWards,
    
    // Loading states
    isLoadingProvinces,
    isLoadingCustomerDistricts,
    isLoadingCustomerWards,
    isLoadingShippingDistricts,
    isLoadingShippingWards,
    
    // Error
    provincesError,
    
    // Handlers
    handleSameAsCustomerChange,
    handleProvinceChange,
    handleDistrictChange,
    handleWardChange,
    handleShippingProvinceChange,
    handleShippingDistrictChange,
    handleShippingWardChange
  } = useCustomerInfo(formData, handleChange);
  
  return (
    <div className="space-y-6">
      {/* Ph·∫ßn 1: Th√¥ng tin kh√°ch h√†ng */}
      <Card className='shadow-none'>
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center text-base font-semibold">
            <User className="h-4 w-4 mr-2" /> 
            Th√¥ng tin kh√°ch h√†ng
          </CardTitle>
          <CardDescription className="text-sm font-light">
            {isLoggedIn 
              ? "Th√¥ng tin c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª´ t√†i kho·∫£n" 
              : "Vui l√≤ng nh·∫≠p th√¥ng tin c·ªßa b·∫°n"}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-1">
                <Label htmlFor="fullName" className="text-xs font-medium">H·ªç t√™n</Label>
                <Input
                  id="fullName"
                  name="fullName"
                  placeholder="Nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß"
                  value={formData.fullName}
                  onChange={handleChange}
                  readOnly={isLoggedIn}
                  className={`${isLoggedIn ? "bg-gray-100" : ""} text-sm`}
                  required
                />
              </div>
              <div className="space-y-1">
                <Label htmlFor="phoneNumber" className="text-xs font-medium">S·ªë ƒëi·ªán tho·∫°i</Label>
                <Input
                  id="phoneNumber"
                  name="phoneNumber"
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  value={formData.phoneNumber}
                  onChange={handleChange}
                  readOnly={isLoggedIn}
                  className={`${isLoggedIn ? "bg-gray-100" : ""} text-sm`}
                  required
                />
              </div>
            </div>

            <div className="space-y-1">
              <Label htmlFor="email" className="text-xs font-medium">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="example@gmail.com"
                value={formData.email}
                onChange={handleChange}
                readOnly={isLoggedIn}
                className={`${isLoggedIn ? "bg-gray-100" : ""} text-sm`}
                required
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Ph·∫ßn 2: Th√¥ng tin nh·∫≠n h√†ng */}
      <Card className='shadow-none'>
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center text-base font-semibold">
            <MapPin className="h-4 w-4 mr-2" />
            Th√¥ng tin nh·∫≠n h√†ng
          </CardTitle>
          <div className="flex items-center justify-between">
            <CardDescription className="text-sm font-light">
              ƒê·ªãa ch·ªâ giao h√†ng c·ªßa b·∫°n
            </CardDescription>
            <div className="flex items-center space-x-2">
              <Label htmlFor="same-as-customer" className="text-xs text-gray-500">L·∫•y th√¥ng tin kh√°ch h√†ng</Label>
              <Switch
                id="same-as-customer"
                checked={sameAsCustomer}
                onCheckedChange={handleSameAsCustomerChange}
              />
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-1">
                <Label htmlFor="receiverName" className="text-xs font-medium">T√™n ng∆∞·ªùi nh·∫≠n</Label>
                <Input
                  id="receiverName"
                  name="receiverName"
                  placeholder="Nh·∫≠p t√™n ng∆∞·ªùi nh·∫≠n"
                  value={formData.receiverName || formData.fullName}
                  onChange={handleChange}
                  className="text-sm"
                  required
                />
              </div>
              <div className="space-y-1">
                <Label htmlFor="receiverPhone" className="text-xs font-medium">S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n</Label>
                <Input
                  id="receiverPhone"
                  name="receiverPhone"
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n"
                  value={formData.receiverPhone || formData.phoneNumber}
                  onChange={handleChange}
                  className="text-sm"
                  required
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-1">
                <Label htmlFor="province" className="text-xs font-medium">T·ªânh / Th√†nh ph·ªë</Label>
                <Select 
                    value={customerProvince} 
                    onValueChange={handleProvinceChange}
                    disabled={isLoadingProvinces}
                    >
                    <SelectTrigger className="text-sm h-9 w-full">
                        {isLoadingProvinces ? (
                        <div className="flex items-center">
                            <Spinner size="sm" className="mr-2" />
                            <span>ƒêang t·∫£i...</span>
                        </div>
                        ) : (
                        <SelectValue placeholder="Ch·ªçn t·ªânh/th√†nh ph·ªë">
                          {customerProvinceName || (customerProvince ? provinces.find(p => p.value === customerProvince)?.label || "ƒêang t·∫£i..." : "")}
                        </SelectValue>
                        )}
                    </SelectTrigger>
                    <SelectContent>
                        {provinces.map((province) => (
                        <SelectItem key={province.value} value={province.value} className="text-sm">
                            {province.label}
                        </SelectItem>
                        ))}
                    </SelectContent>
                    </Select>
              </div>

              <div className="space-y-1">
                <Label htmlFor="district" className="text-xs font-medium">Qu·∫≠n / Huy·ªán</Label>
                <Select 
                  value={customerDistrict} 
                  onValueChange={handleDistrictChange}
                  disabled={!customerProvince || isLoadingCustomerDistricts}
                >
                  <SelectTrigger className="text-sm h-9 w-full">
                    {isLoadingCustomerDistricts ? (
                      <div className="flex items-center">
                        <Spinner size="sm" className="mr-2" />
                        <span>ƒêang t·∫£i...</span>
                      </div>
                    ) : (
                      <SelectValue placeholder="Ch·ªçn qu·∫≠n/huy·ªán">
                        {customerDistrictName || (customerDistrict ? customerDistricts.find(d => d.value === customerDistrict)?.label || "ƒêang t·∫£i..." : "")}
                      </SelectValue>
                    )}
                  </SelectTrigger>
                  <SelectContent>
                    {customerDistricts.map((district) => (
                      <SelectItem key={district.value} value={district.value} className="text-sm">
                        {district.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-1">
                <Label htmlFor="ward" className="text-xs font-medium">Ph∆∞·ªùng / X√£</Label>
                <Select 
                  value={customerWard} 
                  onValueChange={handleWardChange}
                  disabled={!customerDistrict || isLoadingCustomerWards}
                >
                  <SelectTrigger className="text-sm h-9 w-full">
                    {isLoadingCustomerWards ? (
                      <div className="flex items-center">
                        <Spinner size="sm" className="mr-2" />
                        <span>ƒêang t·∫£i...</span>
                      </div>
                    ) : (
                      <SelectValue placeholder="Ch·ªçn ph∆∞·ªùng/x√£">
                        {customerWardName || (customerWard ? customerWards.find(w => w.value === customerWard)?.label || "ƒêang t·∫£i..." : "")}
                      </SelectValue>
                    )}
                  </SelectTrigger>
                  <SelectContent>
                    {customerWards.map((ward) => (
                      <SelectItem key={ward.value} value={ward.value} className="text-sm">
                        {ward.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-1">
                <Label htmlFor="address" className="text-xs font-medium">ƒê·ªãa ch·ªâ c·ª• th·ªÉ</Label>
                <Input
                  id="address"
                  name="address"
                  placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng, khu v·ª±c..."
                  value={formData.address}
                  onChange={handleChange}
                  className="text-sm h-9"
                  required
                />
                {/* Field hi·ªÉn th·ªã ƒë·ªãa ch·ªâ ƒë√£ ch·ªçn */}
                {(customerProvinceName || customerDistrictName || customerWardName) && (
                  <div className="text-xs text-gray-500 mt-1">
                    {[customerWardName, customerDistrictName, customerProvinceName]
                      .filter(Boolean)
                      .join(", ")}
                  </div>
                )}
              </div>
            </div>

            <div className="space-y-1">
              <Label htmlFor="note" className="text-xs font-medium">Ghi ch√∫</Label>
              <Textarea
                id="note"
                name="note"
                placeholder="Ghi ch√∫ v·ªÅ ƒë∆°n h√†ng, v√≠ d·ª•: th·ªùi gian hay ch·ªâ d·∫´n ƒë·ªãa ƒëi·ªÉm giao h√†ng chi ti·∫øt h∆°n"
                value={formData.note}
                onChange={handleChange}
                className="h-20 text-sm resize-none"
              />
            </div>

            <div className="flex items-center space-x-2 mt-2">
              <Checkbox 
                id="saveInfo" 
                checked={formData.saveInfo}
                onCheckedChange={handleCheckboxChange}
                className="h-4 w-4"
              />
              <Label htmlFor="saveInfo" className="text-xs">L∆∞u th√¥ng tin cho l·∫ßn thanh to√°n sau</Label>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
